
/*
 * Class: CMSC203 
 * Instructor:
 * Description: you are Encryption and decryption on 
 * ceaser cipher and bellaso cipher 
 * Due: 10/9/2023
 * Platform/compiler: ECLIPSE
 * I pledge that I have completed the programming  assignment independently. 
*  I have not copied the code from a student or any source. 
*  I have not given my code to any student.
*  Print your Name here: Alexia Majano
*/

public class CryptoManager {
	
	private static final char LOWER_RANGE = ' ';
	private static final char UPPER_RANGE = '_';
	private static final int RANGE = UPPER_RANGE - LOWER_RANGE + 1;

	/**
	 * This method determines if a string is within the allowable bounds of ASCII codes 
	 * according to the LOWER_RANGE and UPPER_RANGE characters
	 * @param plainText a string to be encrypted, if it is within the allowable bounds
	 * @return true if all characters are within the allowable bounds, false if any character is outside
	 */
	   public static boolean isStringInBounds(String plainText) {
	        
	        for (char x : plainText.toCharArray()) {
	          
	            if (x < LOWER_RANGE || x > UPPER_RANGE) {
	                return false; // Character is outside the bounds, return false
	            }
	        }

	       
	        return true;
	    }

	    public static String caesarEncryption(String plainText, int key) {
	    	if (!isStringInBounds(plainText)) {
	            return "The selected string is not in bounds, Try again.";
	        }
	        StringBuilder encryptedText = new StringBuilder();
	        

	        for (int i = 0; i < plainText.length();i++) 
	        {
	            char c = plainText.charAt(i);
	            c = (char)((c - LOWER_RANGE + key) % RANGE + LOWER_RANGE);
	            encryptedText.append(c);
	        }

	        return encryptedText.toString();
	    }

	    public static String caesarDecryption(String encryptedText, int key) {
	    	if (!isStringInBounds(encryptedText)) {
	            return "The selected string is not in bounds, Try again.";
	        }
	        StringBuilder decryptedText = new StringBuilder();

	        for (int i = 0; i < encryptedText.length();i++) {
	            char c = encryptedText.charAt(i);
	            c = (char)((c - LOWER_RANGE - key + RANGE) % RANGE + LOWER_RANGE);
	            decryptedText.append(c);
	        }

	        return decryptedText.toString();
	    }
	    	
	    public static String bellasoEncryption(String plainText, String bellasoStr) {
	        if (!isStringInBounds(plainText)) {
	            return "The selected string is not in bounds, Try again.";
	        }

	        StringBuilder encryptedText  = new StringBuilder();

	        for (int i = 0; i < plainText.length(); i++) {
	            char c = plainText.charAt(i);
	            char bellasoChar = bellasoStr.charAt(i % bellasoStr.length()); 
	            int offset = (int) bellasoChar;

	            c = (char)((c - LOWER_RANGE + offset) % (UPPER_RANGE - LOWER_RANGE + 1) + LOWER_RANGE);
	            encryptedText .append(c);
	        }

	        return encryptedText .toString();
	    }

	    public static String bellasoDecryption(String encryptedText, String bellasoStr) {
	    	if (!isStringInBounds(encryptedText)) {
	            return "The selected string is not in bounds, Try again.";
	        }
	    	StringBuilder decryptedText  = new StringBuilder();
	    	
	        for (int i = 0; i < encryptedText.length(); i++) {
	            char c = encryptedText.charAt(i);
	            char bellaso = bellasoStr.charAt(i % bellasoStr.length());
	            int offset = (int) bellaso;
	            

	            c = (char)((c - LOWER_RANGE - offset + UPPER_RANGE - LOWER_RANGE + 1) % (UPPER_RANGE - LOWER_RANGE + 1) + LOWER_RANGE);
	            decryptedText.append(c);
	        }

	        return decryptedText.toString();
	    }
	}
